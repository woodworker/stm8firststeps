--- inc/stm8s.h	2014-09-19 12:45:10.426176737 +0200
+++ stm8s.h.sdcc	2014-09-19 12:20:51.914610927 +0200
@@ -75,6 +75,8 @@
  #define _RAISONANCE_
 #elif defined(__ICCSTM8__)
  #define _IAR_
+#elif defined(__SDCC_REVISION)
+ #define _SDCC_
 #else
  #error "Unsupported Compiler!"          /* Compiler defines not found */
 #endif
@@ -127,7 +129,14 @@
  #else /* STM8S903, STM8S103, STM8S003, STM8S105, STM8AF626x */
   /*!< Used with memory Models for code less than 64K */
   #define MEMCPY memcpy
- #endif /* STM8S208 or STM8S207 or STM8S007 or STM8AF62Ax or STM8AF52Ax */ 
+ #endif /* STM8S208 or STM8S207 or STM8S007 or STM8AF62Ax or STM8AF52Ax */
+#elif defined (_SDCC_)
+ #define FAR  __far
+ // Apparently, SDCC gets confused by __near
+ #define NEAR
+ #define TINY __tiny
+ #define EEPROM __eeprom
+ #define CONST  const
 #else /*_IAR_*/
  #define FAR  __far
  #define NEAR __near
@@ -195,6 +204,9 @@
 #define     __O     volatile         /*!< defines 'write only' permissions    */
 #define     __IO    volatile         /*!< defines 'read / write' permissions  */
 
+#if defined(_SDCC_)
+#include <stdint.h>
+#else
 /*!< Signed integer types  */
 typedef   signed char     int8_t;
 typedef   signed short    int16_t;
@@ -204,6 +216,7 @@
 typedef unsigned char     uint8_t;
 typedef unsigned short    uint16_t;
 typedef unsigned long     uint32_t;
+#endif
 
 /*!< STM8 Standard Peripheral Library old types (maintained for legacy purpose) */
 
@@ -2615,6 +2628,15 @@
  #define trap()                {_asm("trap\n");} /* Trap (soft IT) */
  #define wfi()                 {_asm("wfi\n");}  /* Wait For Interrupt */
  #define halt()                {_asm("halt\n");} /* Halt */
+#elif defined(_SDCC_)
+ #define enableInterrupts()    {__asm__("rim\n");}  /* enable interrupts */
+ #define disableInterrupts()   {__asm__("sim\n");}  /* disable interrupts */
+ #define rim()                 {__asm__("rim\n");}  /* enable interrupts */
+ #define sim()                 {__asm__("sim\n");}  /* disable interrupts */
+ #define nop()                 {__asm__("nop\n");}  /* No Operation */
+ #define trap()                {__asm__("trap\n");} /* Trap (soft IT) */
+ #define wfi()                 {__asm__("wfi\n");}  /* Wait For Interrupt */
+ #define halt()                {__asm__("halt\n");} /* Halt */
 #else /*_IAR_*/
  #include <intrinsics.h>
  #define enableInterrupts()    __enable_interrupt()   /* enable interrupts */
